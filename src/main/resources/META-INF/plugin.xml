<!-- Plugin Configuration File. Read more: https://plugins.jetbrains.com/docs/intellij/plugin-configuration-file.html -->
<idea-plugin>
    <!-- Unique identifier of the plugin. It should be FQN. It cannot be changed between the plugin versions. -->
    <id>io.seedwing.enforcer.seedwing-enforcer-intellij-plugin</id>

    <!-- Public plugin name should be written in Title Case.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-name -->
    <name>Seedwing Enforcer</name>

    <!-- A displayed Vendor name or Organization ID displayed on the Plugins Page. -->
    <vendor email="support@yourcompany.com" url="https://www.yourcompany.com">YourCompany</vendor>

    <!-- Description of the plugin displayed on the Plugin Page and IDE Plugin Manager.
         Simple HTML elements (text formatting, paragraphs, and lists) can be added inside of <![CDATA[ ]]> tag.
         Guidelines: https://plugins.jetbrains.com/docs/marketplace/plugin-overview-page.html#plugin-description -->
    <description><![CDATA[
    A Seeding Enforcer plugin for IntelliJ.<br/>
    If a project as an enforcer configuration, this plugin can run the Seedwing policies against the dependency list,
    and provide a report of the outcome.
  ]]></description>

    <!-- Product and plugin compatibility requirements.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-compatibility.html -->
    <depends>com.intellij.modules.platform</depends>

    <!-- Extension points defined by the plugin.
         Read more: https://plugins.jetbrains.com/docs/intellij/plugin-extension-points.html -->
    <extensions defaultExtensionNs="com.intellij">
        <!-- register a preloading activity. You need to init IntellijLanguageClient with your config, see readme -->
        <preloadingActivity implementation="io.seedwing.enforcer.intellij.plugin.LspPreloadingActivity"
                            id="io.seedwing.enforcer.intellij.PreloadingActivity"/>
        <!-- register intellijLanguageClient as a Service OR as a plugin component (see readme)... -->
        <applicationService serviceImplementation="org.wso2.lsp4intellij.IntellijLanguageClient"/>

        <!-- register a listener on editor events, required for lsp file sync -->
        <editorFactoryListener implementation="org.wso2.lsp4intellij.listeners.LSPEditorListener"/>
        <fileDocumentManagerListener implementation="org.wso2.lsp4intellij.listeners.LSPFileDocumentManagerListener"/>

        <!-- for displaying notifications by lsp -->
        <notificationGroup id="lsp" displayType="STICKY_BALLOON"/>

        <!-- for displaying the statusbar icon -->
        <statusBarWidgetFactory implementation="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"
                                id="org.wso2.lsp4intellij.statusbar.LSPServerStatusWidgetFactory"
                                order="first"/>

        <!-- needed for code diagnostics -->
        <externalAnnotator id="LSPAnnotator"
                           language="XML"
                           order="last"
                           implementationClass="io.seedwing.enforcer.intellij.plugin.extension.ExtendedAnnotator"/>

        <externalAnnotator id="seedwing.test"
                           language=""
                           order="last"
                           implementationClass="io.seedwing.enforcer.intellij.plugin.TestAnnotator"/>

        <codeInsight.codeVisionProvider
                implementation="io.seedwing.enforcer.intellij.plugin.extension.ExtendedCodeVisionProvider"
        />

        <toolWindow id="seedwing.report"
                    factoryClass="io.seedwing.enforcer.intellij.plugin.ui.ReportWindowFactory"
                    doNotActivateOnStart="true"
                    secondary="true"
                    anchor="right"
                    canCloseContents="true"
                    icon="AllIcons.Actions.Preview"
        />

        <!-- managing report views -->
        <applicationService
                serviceImplementation="io.seedwing.enforcer.intellij.plugin.service.ReportService"/>

        <!-- showing discovered dependencies -->
        <toolWindow id="Discovered dependencies" secondary="true"
                    icon="AllIcons.Toolwindows.ToolWindowModuleDependencies" anchor="right"
                    factoryClass="io.seedwing.enforcer.intellij.plugin.ui.DependenciesToolWindowFactory"/>

        <!-- holding the state of discovered dependencies -->
        <applicationService
                serviceImplementation="io.seedwing.enforcer.intellij.plugin.service.DiscoveredDependencies"/>
    </extensions>

    <applicationListeners>
        <!-- required for lsp file sync -->
        <listener class="org.wso2.lsp4intellij.listeners.VFSListener"
                  topic="com.intellij.openapi.vfs.VirtualFileListener"/>
        <listener class="org.wso2.lsp4intellij.listeners.LSPProjectManagerListener"
                  topic="com.intellij.openapi.project.ProjectManagerListener"/>
    </applicationListeners>

</idea-plugin>